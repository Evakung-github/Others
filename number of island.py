# -*- coding: utf-8 -*-
"""
Created on Wed Jan 22 18:20:54 2020

@author: eva
"""

class Solution:
# DFS method. 
     
     def numIslands(self, grid: List[List[str]]) -> int:
         if not grid or len(grid) == 0:
             return 0
         total = 0
         for i in range(len(grid)):
             for j in range(len(grid[i])):
                 if grid[i][j] == '1':
                     # the return answer is 1, so we can just write total += 1.
                     total += 1
                         
                     #total += dfs(grid, i, j)
         return total

 def dfs(grid, i, j):
     if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]) or grid[i][j] == '0':
         return 0
# Turn the visited nodes into "0", then it won't be calculated twice. keep turning the adjacent node into "0".
     grid[i][j] = '0'
     dfs(grid, i - 1, j)
     dfs(grid, i + 1, j)
     dfs(grid, i, j - 1)
     dfs(grid, i, j + 1)
     
#    def numIslands(self, grid):
#        if not grid:
#            return 0
#        elif not grid[0]:
#            return 0
#        
#        count = 0
#        num = 0 
#        if grid[0][0] == "1":
#            count,num = 1,1
#            grid[0][0] = 1
#        for i in range(1,len(grid[0])):
#            if grid[0][i] == "0":
#                continue
#            if grid[0][i-1] == "0":
#                count += 1
#                num += 1
#                grid[0][i] = num
#            else:
#                grid[0][i] = grid[0][i-1]
#        
#        inter = {}
#        for r in range(1,len(grid)):
#            for c in range(0,len(grid[0])):
#                if grid[r][c] == "0":
#                    continue
#        
#                left,up = int(grid[r][max(0,c-1)]),int(grid[r-1][c])
#                try:
#                    left  = inter[left]
#                except:
#                    pass
#                try:
#                    up = inter[up]
#                except:
#                    pass
#                
#                
#                if max(left,up) == 0 or (up == 0 and c ==0):
#                    count += 1
#                    num += 1
#                    grid[r][c] = num
#                elif min(left,up) ==0:
#                    grid[r][c] = max(left,up)
#                elif min(up,left) in inter or left == up or c==0:
#                    grid[r][c] = max(left,up)
#                else:
#                    inter[min(left,up)]=max(left,up)
#                    count -= 1
#                    grid[r][c] = max(left,up)
#                
#                
#        
#        return count
                    

a = Solution()
a.numIslands(d)








b = a.numIslands([["0","1","0","0","1","1","1","0","0","0","0","0","1","0","0","0","0","1","0","1"],["1","0","1","0","0","1","1","0","0","1","0","1","0","1","0","1","1","0","0","0"],["0","1","0","0","0","1","1","1","1","0","0","0","0","0","1","1","1","1","0","1"],["1","1","0","0","0","1","1","0","0","0","1","1","1","0","0","1","0","1","1","0"],["0","1","0","1","1","0","1","0","0","0","1","0","0","1","0","0","0","0","0","1"],["1","0","0","1","0","1","0","0","0","1","1","0","1","0","0","1","0","0","0","0"],["1","0","0","0","1","1","0","0","0","0","0","1","0","0","1","0","0","0","0","1"],["1","0","0","0","1","0","1","1","1","0","1","0","1","1","1","1","0","0","0","1"],["1","0","0","1","0","0","0","1","0","0","0","0","0","0","0","0","0","1","0","1"],["0","0","0","1","0","1","1","1","1","1","1","1","1","1","0","0","0","0","1","0"],["1","0","1","0","1","0","0","1","1","1","0","1","1","0","0","1","1","0","0","0"],["0","1","0","0","1","0","0","0","0","0","0","1","1","1","1","0","0","0","1","0"],["1","0","0","0","1","1","1","0","1","0","0","0","1","0","1","0","1","0","0","1"],["0","0","0","0","1","0","1","1","0","1","0","1","0","1","1","1","1","0","0","0"],["0","1","1","0","0","0","0","1","0","0","1","1","1","0","0","1","1","0","1","0"],["1","0","1","1","1","1","1","1","0","1","1","0","1","0","0","1","0","0","0","1"],["1","0","0","0","1","0","1","0","0","1","0","1","0","0","1","0","0","1","1","1"],["0","0","1","0","0","0","0","1","0","0","1","1","0","1","1","1","0","0","0","0"],["0","0","1","0","0","0","0","0","0","1","1","0","1","0","1","0","0","0","1","1"],["1","0","0","0","1","0","1","1","1","0","0","1","0","1","0","1","1","0","0","0"]])
a.numIslands([["1"],["0"],["1"],["0"],["1"],["1"]])
a.numIslands([["0","1","0"],["1","0","1"],["0","1","0"]])

c = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"]
,["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"]
,["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"]
,["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

d = [["1","0","1","0","1","1","1","1","0","1","0","1","0","1","1","0","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","0","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","0","1","1","0","1","0","0","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","0","1","1","1","0","1","0","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","0","1","0","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","0","1","0","1","1","0","1","1","1","0","0","1"]]
d = list(map(list,zip(*d)))
import json
json.dumps(d)
